// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Подтверждение email по токену
	// (GET /auth/confirm-email)
	GetAuthConfirmEmail(w http.ResponseWriter, r *http.Request, params GetAuthConfirmEmailParams)
	// Вход пользователя
	// (POST /auth/login)
	PostAuthLogin(w http.ResponseWriter, r *http.Request)
	// Выход пользователя (инвалидировать токен)
	// (POST /auth/logout)
	PostAuthLogout(w http.ResponseWriter, r *http.Request)
	// Регистрация пользователя
	// (POST /auth/register)
	PostAuthRegister(w http.ResponseWriter, r *http.Request)
	// Сброс пароля (отправка ссылки на email)
	// (POST /auth/reset-password)
	PostAuthResetPassword(w http.ResponseWriter, r *http.Request)
	// Список курсов
	// (GET /courses)
	GetCourses(w http.ResponseWriter, r *http.Request)
	// Создание курса (только для админов)
	// (POST /courses)
	PostCourses(w http.ResponseWriter, r *http.Request)
	// Лендинг страница курсов
	// (GET /courses/{courseId}/landing)
	GetCoursesCourseIdLanding(w http.ResponseWriter, r *http.Request, courseId int)
	// Модули курса
	// (GET /courses/{courseId}/modules)
	GetCoursesCourseIdModules(w http.ResponseWriter, r *http.Request, courseId int)
	// Список страниц курса
	// (GET /courses/{courseId}/pages)
	GetCoursesCourseIdPages(w http.ResponseWriter, r *http.Request, courseId int)
	// Сайдбар курса (список страниц в порядке)
	// (GET /courses/{courseId}/sidebar)
	GetCoursesCourseIdSidebar(w http.ResponseWriter, r *http.Request, courseId int)
	// Получение всех пользователей (только для админов)
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request)
	// Создание пользователя администратором
	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request)
	// Получение профиля текущего пользователя
	// (GET /users/me)
	GetUsersMe(w http.ResponseWriter, r *http.Request)
	// Удаление пользователя
	// (DELETE /users/me/delete)
	DeleteUsersMeDelete(w http.ResponseWriter, r *http.Request)
	// Изменение пароля текущего пользователя
	// (PATCH /users/me/password)
	PatchUsersMePassword(w http.ResponseWriter, r *http.Request)
	// Обновление данных текущего пользователя
	// (PATCH /users/me/update)
	PatchUsersMeUpdate(w http.ResponseWriter, r *http.Request)
	// Получение данных пользователя по ID (только для админов)
	// (GET /users/{id})
	GetUsersId(w http.ResponseWriter, r *http.Request, id int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Подтверждение email по токену
// (GET /auth/confirm-email)
func (_ Unimplemented) GetAuthConfirmEmail(w http.ResponseWriter, r *http.Request, params GetAuthConfirmEmailParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Вход пользователя
// (POST /auth/login)
func (_ Unimplemented) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Выход пользователя (инвалидировать токен)
// (POST /auth/logout)
func (_ Unimplemented) PostAuthLogout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Регистрация пользователя
// (POST /auth/register)
func (_ Unimplemented) PostAuthRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Сброс пароля (отправка ссылки на email)
// (POST /auth/reset-password)
func (_ Unimplemented) PostAuthResetPassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Список курсов
// (GET /courses)
func (_ Unimplemented) GetCourses(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создание курса (только для админов)
// (POST /courses)
func (_ Unimplemented) PostCourses(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Лендинг страница курсов
// (GET /courses/{courseId}/landing)
func (_ Unimplemented) GetCoursesCourseIdLanding(w http.ResponseWriter, r *http.Request, courseId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Модули курса
// (GET /courses/{courseId}/modules)
func (_ Unimplemented) GetCoursesCourseIdModules(w http.ResponseWriter, r *http.Request, courseId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Список страниц курса
// (GET /courses/{courseId}/pages)
func (_ Unimplemented) GetCoursesCourseIdPages(w http.ResponseWriter, r *http.Request, courseId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Сайдбар курса (список страниц в порядке)
// (GET /courses/{courseId}/sidebar)
func (_ Unimplemented) GetCoursesCourseIdSidebar(w http.ResponseWriter, r *http.Request, courseId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение всех пользователей (только для админов)
// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создание пользователя администратором
// (POST /users)
func (_ Unimplemented) PostUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение профиля текущего пользователя
// (GET /users/me)
func (_ Unimplemented) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удаление пользователя
// (DELETE /users/me/delete)
func (_ Unimplemented) DeleteUsersMeDelete(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Изменение пароля текущего пользователя
// (PATCH /users/me/password)
func (_ Unimplemented) PatchUsersMePassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновление данных текущего пользователя
// (PATCH /users/me/update)
func (_ Unimplemented) PatchUsersMeUpdate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение данных пользователя по ID (только для админов)
// (GET /users/{id})
func (_ Unimplemented) GetUsersId(w http.ResponseWriter, r *http.Request, id int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAuthConfirmEmail operation middleware
func (siw *ServerInterfaceWrapper) GetAuthConfirmEmail(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthConfirmEmailParams

	// ------------- Required query parameter "token" -------------

	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthConfirmEmail(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthResetPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthResetPassword(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthResetPassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCourses operation middleware
func (siw *ServerInterfaceWrapper) GetCourses(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCourses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostCourses operation middleware
func (siw *ServerInterfaceWrapper) PostCourses(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCourses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCoursesCourseIdLanding operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseIdLanding(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId int

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", chi.URLParam(r, "courseId"), &courseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "courseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoursesCourseIdLanding(w, r, courseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCoursesCourseIdModules operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseIdModules(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId int

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", chi.URLParam(r, "courseId"), &courseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "courseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoursesCourseIdModules(w, r, courseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCoursesCourseIdPages operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseIdPages(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId int

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", chi.URLParam(r, "courseId"), &courseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "courseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoursesCourseIdPages(w, r, courseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCoursesCourseIdSidebar operation middleware
func (siw *ServerInterfaceWrapper) GetCoursesCourseIdSidebar(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "courseId" -------------
	var courseId int

	err = runtime.BindStyledParameterWithOptions("simple", "courseId", chi.URLParam(r, "courseId"), &courseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "courseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoursesCourseIdSidebar(w, r, courseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUsersMeDelete operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersMeDelete(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersMeDelete(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUsersMePassword operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersMePassword(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUsersMePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUsersMeUpdate operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersMeUpdate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUsersMeUpdate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/confirm-email", wrapper.GetAuthConfirmEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.PostAuthLogout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/reset-password", wrapper.PostAuthResetPassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses", wrapper.GetCourses)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/courses", wrapper.PostCourses)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}/landing", wrapper.GetCoursesCourseIdLanding)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}/modules", wrapper.GetCoursesCourseIdModules)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}/pages", wrapper.GetCoursesCourseIdPages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/courses/{courseId}/sidebar", wrapper.GetCoursesCourseIdSidebar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.PostUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/me/delete", wrapper.DeleteUsersMeDelete)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/me/password", wrapper.PatchUsersMePassword)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/me/update", wrapper.PatchUsersMeUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetUsersId)
	})

	return r
}
