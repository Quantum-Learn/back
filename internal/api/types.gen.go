// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthResponse определяет модель для AuthResponse.
type AuthResponse struct {
	Token *string `json:"token,omitempty"`
}

// Course defines model for Course.
type Course struct {
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// CourseCreateRequest defines model for CourseCreateRequest.
type CourseCreateRequest struct {
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// CoursePage defines model for CoursePage.
type CoursePage struct {
	Content string `json:"content"`
	Id      int    `json:"id"`
	Order   int    `json:"order"`
	Title   string `json:"title"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// User defines model for User.
type User struct {
	Email        *string `json:"email,omitempty"`
	Id           *int    `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	PasswordHash *string `json:"-"`
}

// GetAuthConfirmEmailParams defines parameters for GetAuthConfirmEmail.
type GetAuthConfirmEmailParams struct {
	Token string `form:"token" json:"token"`
}

// PostAuthResetPasswordJSONBody defines parameters for PostAuthResetPassword.
type PostAuthResetPasswordJSONBody struct {
	Email string `json:"email"`
}

// PatchUsersMePasswordJSONBody defines parameters for PatchUsersMePassword.
type PatchUsersMePasswordJSONBody struct {
	NewPassword string `json:"newPassword"`
	OldPassword string `json:"oldPassword"`
}

// PatchUsersMeUpdateJSONBody defines parameters for PatchUsersMeUpdate.
type PatchUsersMeUpdateJSONBody struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = RegisterRequest

// PostAuthResetPasswordJSONRequestBody defines body for PostAuthResetPassword for application/json ContentType.
type PostAuthResetPasswordJSONRequestBody PostAuthResetPasswordJSONBody

// PostCoursesJSONRequestBody defines body for PostCourses for application/json ContentType.
type PostCoursesJSONRequestBody = CourseCreateRequest

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = RegisterRequest

// PatchUsersMePasswordJSONRequestBody defines body for PatchUsersMePassword for application/json ContentType.
type PatchUsersMePasswordJSONRequestBody PatchUsersMePasswordJSONBody

// PatchUsersMeUpdateJSONRequestBody defines body for PatchUsersMeUpdate for application/json ContentType.
type PatchUsersMeUpdateJSONRequestBody PatchUsersMeUpdateJSONBody

// Enrollment связывает пользователя и курс
type Enrollment struct {
	ID       int64 `json:"id"`
	UserID   int64 `json:"user_id"`
	CourseID int64 `json:"course_id"`
	// Можно добавить дату записи или статус
	// EnrolledAt time.Time `json:"enrolled_at"`
}

// Progress отражает прогресс пользователя в курсе/уроке
type Progress struct {
	ID       int64 `json:"id"`
	UserID   int64 `json:"user_id"`
	CourseID int64 `json:"course_id"`
	LessonID int64 `json:"lesson_id"`
	Done     bool  `json:"done"`
	// Опционально: процент выполнения или дата последнего обновления
	// CompletedAt *time.Time `json:"completed_at,omitempty"`
}
